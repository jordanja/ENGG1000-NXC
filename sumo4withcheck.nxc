mutex moveMutex;


#define LEFT_WHEEL_PORT OUT_C
#define RIGHT_WHEEL_PORT OUT_A

#define SCAN_WHEEL_SPEED 70
#define DESTROY_WHEEL_SPEED 100

#define BEGINING_WAIT_TIME 3000

//#define LIGHT_SENSOR_1_PORT IN_1
//#define LIGHT_SENSOR_2_PORT IN_2
//#define LIGHT_SENSROR_THRESHOLD 30
//#define LIGHT_SENSOR_TYPE IN_TYPE_LIGHT_ACTIVE

#define ULTRASONIC_SENSOR_PORT IN_4
#define DISTANCE_THRESHOLD 60

#define TRUE 1
#define FALSE 0


task lookForOpponent();
task destroyRobot();
int validateUSSensor();

task main()
{
	Wait(BEGINING_WAIT_TIME);
	start lookForOpponent;	
	while (TRUE) {

	}
}

task lookForOpponent(){
	SetSensorLowspeed(ULTRASONIC_SENSOR_PORT); 
 
	while(TRUE){
		OnFwd(RIGHT_WHEEL_PORT,SCAN_WHEEL_SPEED); 
		OnRev(LEFT_WHEEL_PORT,SCAN_WHEEL_SPEED);
		while(SensorUS(ULTRASONIC_SENSOR_PORT)>DISTANCE_THRESHOLD); 
		//Off(RIGHT_WHEEL_PORT);
		//Off(LEFT_WHEEL_PORT);
	

		start destroyRobot;

	}
}

task destroyRobot(){

	TextOut(5,LCD_LINE2,"in");
	SetSensorLowspeed(ULTRASONIC_SENSOR_PORT); 
	while(TRUE) {

		while (validateUSSensor() == TRUE) {
			

			Off(OUT_AC);

			OnFwd(OUT_AC, 20);

			
			
			TextOut(5,LCD_LINE3,"something infront");
		} 

		while (validateUSSensor() == FALSE){
			

			Off(OUT_AC);
		
			OnFwd(OUT_A,20);
			OnRev(OUT_C,20);
			
			
			TextOut(5,LCD_LINE4,"something not infront");	
			
		}
	
	
		TextOut(5,LCD_LINE2,"                  ");		
		TextOut(5,LCD_LINE3,"                  ");	
		TextOut(5,LCD_LINE4,"                  ");	
	}
		TextOut(5,LCD_LINE5,"out while");	

}

//validateUSSensor() == FALSE
int validateUSSensor() {
	int count = 0;
	int sensorTrue = 0;
	while (count < 5) {
		if (SensorUS(ULTRASONIC_SENSOR_PORT) <DISTANCE_THRESHOLD) {
			sensorTrue ++;
		}
		count++;
	}
	if (sensorTrue > 3) {
		return TRUE;
		TextOut(5,LCD_LINE1,"true");
	}
	else {
		return FALSE;
	}
}

























